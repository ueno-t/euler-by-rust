/// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with and , the first terms will be:
/// `1,2,3,5,8,13,21,34,55,89,...`
/// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
struct Fibonacci {
    a: isize,
    b: isize,
}

impl Fibonacci {
    fn new() -> Self {
        Self { a: 0, b: 1 }
    }
}

impl Iterator for Fibonacci {
    type Item = isize;
    fn next(&mut self) -> Option<Self::Item> {
        let next = self.b + self.a;
        self.a = self.b;
        self.b = next;
        Some(next)
    }
}

pub fn solver(n: isize) -> isize {
    Fibonacci::new()
        .take_while(|&x| x < n)
        .filter(|&x| x % 2 == 0)
        .sum()
}

#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn should_return_44() {
        assert_eq!(solver(90), 44);
    }

    #[test]
    fn should_return_4613732() {
        assert_eq!(solver(4000000), 4613732);
    }
}
